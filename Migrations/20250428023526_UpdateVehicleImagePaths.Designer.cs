// <auto-generated />
using System;
using CarrAuto.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarrAuto.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250428023526_UpdateVehicleImagePaths")]
    partial class UpdateVehicleImagePaths
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarrAuto.Models.CategorieProduit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CategoriesProduits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Tous types d'essuie-glaces pour votre véhicule",
                            Nom = "Essuie-glaces"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Ampoules pour phares et éclairage intérieur",
                            Nom = "Ampoules"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Huiles de qualité pour tous types de moteurs",
                            Nom = "Huiles moteur"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Produits de nettoyage pour vitres et pare-brise",
                            Nom = "Produits lave-glace"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Filtres à huile, à air, à carburant et d'habitacle",
                            Nom = "Filtres"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Batteries pour tous types de véhicules",
                            Nom = "Batteries"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Outils pour l'entretien de votre véhicule",
                            Nom = "Outillage"
                        });
                });

            modelBuilder.Entity("CarrAuto.Models.CategorieService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CategoriesServices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Services de réparation mécanique pour votre véhicule",
                            Nom = "Réparation mécanique"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Services d'entretien courant pour votre véhicule",
                            Nom = "Entretien régulier"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Services de diagnostic des problèmes électroniques",
                            Nom = "Diagnostic électronique"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Services de montage et équilibrage de pneus",
                            Nom = "Montage de pneus"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Services liés à la climatisation de votre véhicule",
                            Nom = "Climatisation"
                        });
                });

            modelBuilder.Entity("CarrAuto.Models.DemandeDevis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnneeVehicule")
                        .HasColumnType("int");

                    b.Property<string>("CommentairesInternes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateDemande")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionTravaux")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MarqueVehicule")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModeleVehicule")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("MontantDevis")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Statut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("DemandesDevis");
                });

            modelBuilder.Entity("CarrAuto.Models.Produit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategorieProduitId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("EnPromotion")
                        .HasColumnType("bit");

                    b.Property<bool>("EnStock")
                        .HasColumnType("bit");

                    b.Property<bool>("EstDisponible")
                        .HasColumnType("bit");

                    b.Property<bool>("EstPopulaire")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Prix")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PrixPromotion")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuantiteStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategorieProduitId");

                    b.ToTable("Produits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategorieProduitId = 3,
                            Description = "Huile synthétique haute performance pour moteurs essence",
                            EnPromotion = false,
                            EnStock = true,
                            EstDisponible = true,
                            EstPopulaire = true,
                            ImageUrl = "/images/products/huile-syntec.jpeg",
                            Nom = "Huile Syntec 5W-30",
                            Prix = 39.99m,
                            QuantiteStock = 50
                        },
                        new
                        {
                            Id = 2,
                            CategorieProduitId = 1,
                            Description = "Essuie-glaces de qualité supérieure adaptables à la plupart des véhicules",
                            EnPromotion = false,
                            EnStock = true,
                            EstDisponible = true,
                            EstPopulaire = false,
                            ImageUrl = "/images/products/essuie-glaces.jpeg",
                            Nom = "Jeu d'essuie-glaces universel",
                            Prix = 24.99m,
                            QuantiteStock = 30
                        },
                        new
                        {
                            Id = 3,
                            CategorieProduitId = 5,
                            Description = "Filtre à air haute performance lavable et réutilisable",
                            EnPromotion = false,
                            EnStock = true,
                            EstDisponible = true,
                            EstPopulaire = true,
                            ImageUrl = "/images/products/filtre-air.jpeg",
                            Nom = "Filtre à air K&N",
                            Prix = 49.99m,
                            QuantiteStock = 15
                        },
                        new
                        {
                            Id = 4,
                            CategorieProduitId = 6,
                            Description = "Batterie fiable pour véhicules de tourisme standard",
                            EnPromotion = false,
                            EnStock = true,
                            EstDisponible = true,
                            EstPopulaire = false,
                            ImageUrl = "/images/products/batterie.jpeg",
                            Nom = "Batterie Exide 12V",
                            Prix = 89.99m,
                            QuantiteStock = 10
                        });
                });

            modelBuilder.Entity("CarrAuto.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategorieServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DetailsSupplementaires")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("EstPopulaire")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("PrixEstimatif")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategorieServiceId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategorieServiceId = 2,
                            Description = "Vidange d'huile avec remplacement du filtre à huile",
                            EstPopulaire = false,
                            ImageUrl = "/images/services/oil-change.jpg",
                            Nom = "Vidange complète",
                            PrixEstimatif = 69.99m
                        },
                        new
                        {
                            Id = 2,
                            CategorieServiceId = 4,
                            Description = "Montage, équilibrage et permutation de vos pneus",
                            EstPopulaire = false,
                            ImageUrl = "/images/services/tire-mounting.jpg",
                            Nom = "Montage et équilibrage de pneus",
                            PrixEstimatif = 49.99m
                        },
                        new
                        {
                            Id = 3,
                            CategorieServiceId = 3,
                            Description = "Analyse complète des systèmes électroniques de votre véhicule",
                            EstPopulaire = false,
                            ImageUrl = "/images/services/diagnostic.jpg",
                            Nom = "Diagnostic électronique complet",
                            PrixEstimatif = 59.99m
                        },
                        new
                        {
                            Id = 4,
                            CategorieServiceId = 5,
                            Description = "Contrôle et recharge du circuit de climatisation",
                            EstPopulaire = false,
                            ImageUrl = "/images/services/ac-service.jpg",
                            Nom = "Recharge de climatisation",
                            PrixEstimatif = 79.99m
                        });
                });

            modelBuilder.Entity("CarrAuto.Models.VehiculeOccasion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Annee")
                        .HasColumnType("int");

                    b.Property<string>("Couleur")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DateMiseEnVente")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("EstDisponible")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImagesSupplementaires")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kilometrage")
                        .HasColumnType("int");

                    b.Property<string>("Marque")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Modele")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OptionsPrincipales")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Prix")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Puissance")
                        .HasColumnType("int");

                    b.Property<string>("Transmission")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TypeCarburant")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("VehiculesOccasion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Annee = 2018,
                            Couleur = "Bleu",
                            DateMiseEnVente = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Toyota Corolla en excellent état, entretien régulier, un seul propriétaire",
                            EstDisponible = true,
                            ImageUrl = "/images/vehicles/vehicle1.jpeg",
                            Kilometrage = 65000,
                            Marque = "Toyota",
                            Modele = "Corolla",
                            Prix = 14999.99m,
                            Transmission = "Automatique",
                            TypeCarburant = "Essence"
                        },
                        new
                        {
                            Id = 2,
                            Annee = 2019,
                            Couleur = "Rouge",
                            DateMiseEnVente = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Honda Civic en parfait état, jamais accidentée, tout l'historique d'entretien disponible",
                            EstDisponible = true,
                            ImageUrl = "/images/vehicles/vehicle2.jpeg",
                            Kilometrage = 48000,
                            Marque = "Honda",
                            Modele = "Civic",
                            Prix = 16500.00m,
                            Transmission = "Manuelle",
                            TypeCarburant = "Essence"
                        },
                        new
                        {
                            Id = 3,
                            Annee = 2017,
                            Couleur = "Gris",
                            DateMiseEnVente = new DateTime(2023, 2, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "SUV Ford Escape idéal pour la famille, bien entretenu, pneus neufs",
                            EstDisponible = true,
                            ImageUrl = "/images/vehicles/vehicle3.jpeg",
                            Kilometrage = 78000,
                            Marque = "Ford",
                            Modele = "Escape",
                            Prix = 13750.00m,
                            Transmission = "Automatique",
                            TypeCarburant = "Essence"
                        });
                });

            modelBuilder.Entity("CarrAuto.Models.Produit", b =>
                {
                    b.HasOne("CarrAuto.Models.CategorieProduit", "CategorieProduit")
                        .WithMany("Produits")
                        .HasForeignKey("CategorieProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategorieProduit");
                });

            modelBuilder.Entity("CarrAuto.Models.Service", b =>
                {
                    b.HasOne("CarrAuto.Models.CategorieService", "CategorieService")
                        .WithMany("Services")
                        .HasForeignKey("CategorieServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategorieService");
                });

            modelBuilder.Entity("CarrAuto.Models.CategorieProduit", b =>
                {
                    b.Navigation("Produits");
                });

            modelBuilder.Entity("CarrAuto.Models.CategorieService", b =>
                {
                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
